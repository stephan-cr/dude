#!/usr/bin/env python
#    -*- mode: python -*-

# Copyright (c) 2010 Diogo Becker
# Distributed under the MIT License
# See accompanying file LICENSE

"""dude - framework for experiments"""

import os
import sys
import optparse
import imp


import dude

if __name__ == '__main__':
     desc = """Commands:
       clean\t delete experiments
       failed\t list all failed experiments
       info\t show experiment description info
       list\t list directories of executed experiments
       missing\t list all missing experiments
       run\t run all experiments
       sum\t summarize results using given summaries
     """
     parser = optparse.OptionParser(usage="%prog [options] command",
                                    version="%prog " + dude.__version__,
                                    description = desc,
                                    formatter = dude.utils.IndentedHelpFormatterWithNL())
     parser.add_option("-f", "--file", dest = "expfile",
                       help="read FILE as a Dudefile", metavar = "FILE")
     parser.add_option("-x", "--filter", "--select",
                       dest = "filter", metavar = "FILTERS",
                       help = "select experiments using filters written in Dudefile\ne.g. -x filter1,filter2")
     parser.add_option("-y", "--filter-inline",
                       dest = "filter_inline", metavar = "FILTERS",
                       help = "select experiments using inline filters separated by semicolons"
                       "\ne.g. -y \"option1=value;option2=[value3,value4]\"")
     parser.add_option("-i",  "--invert-filters", default = False,
                       dest = "invert", action = "store_true",
                       help = "invert filter selection")

     group2 = optparse.OptionGroup(parser, 'run specific options')
     group2.add_option("-n","--no-output", action = "store_false",
                       dest = "show_output", default = True,
                       help = "omit the output of experiment")
     group2.add_option("--force", action = "store_true",
                       dest = "force", default = False,
                       help = "force execution")
     group2.add_option("--skip-global", default = False,
                       dest = "skip_global", action = "store_true",
                       help = "skip global prepare")


     group4 = optparse.OptionGroup(parser, 'list specific options')
     group4.add_option("-d", "--dict", action = "store_true",
                       dest = "dict", default = False,
                       help = "show output in dict format")

     parser.add_option_group(group2)
     parser.add_option_group(group4)


     (options, args) = parser.parse_args()


     # check if file exists
     if args != []:
          if args[0] == "create":
               dude.expgen.create(args[1])
               sys.exit(0)

          e = None
          if not options.expfile == None:
               try:
                    e = imp.load_source('', options.expfile)
                    e.root = os.getcwd()
               except IOError:
                    print >> sys.stderr, 'ERROR: Loading', options.expfile, 'failed'
                    parser.print_help()
                    sys.exit(1)
          else:
               for f in ['desc.py', 'dudefile', 'Dudefile', 'dudefile.py']:
                    try:
                         e = imp.load_source('', f)
                         e.root = os.getcwd()
                         break
                    except IOError:
                         pass
               if e == None:
                    print >> sys.stderr, 'ERROR: no dudefile found'
                    parser.print_help()
                    sys.exit(1)

          dude.core.check_cfg(e)
          dude.summary.check_cfg(e)

          # TODO: the selection of experiments and how that interact with the commands should be redone.
          # the last parameter to filter_experiments include or exclude the not yet run experiments

          experiments = []
          if options.filter != None:
               filters = []
               for f in options.filter.split(','):
                    filters.append(e.filters[f])
               experiments = dude.filter.filter_experiments(e, filters, options.invert, True)
          elif options.filter_inline:
               experiments = dude.filter.filter_inline(e, options.filter_inline, options.invert, False)
          else:
               experiments = dude.core.get_run_experiments(e)

          cmd = args[0]
          if cmd == 'run':
               dude.execute.init()
               if options.force:
                    dude.clean.clean_experiments(e, experiments)
               dude.execute.run(e, experiments, options)
          elif cmd == 'sum':
               dude.summary.summarize(e, experiments, args[1:])
          elif cmd == 'list':
               for run, experiment in experiments:
                    if options.dict:
                         print "run:",run, "experiment:", experiment
                    else:
                         print dude.core.get_folder(e, experiment, run)
          elif cmd == 'failed':
               failed = dude.core.get_failed(e, False)
               for ffile in failed:
                    print ffile
          elif cmd == 'missing':
               failed = dude.core.get_failed(e, True)
               for exp in failed:
                    print exp
          elif cmd == 'force-fail':
               print "ERROR: Command not implemented!"
               sys.exit(1)
          elif cmd == 'clean':
               # TODO if no filter applied, ask if that's really what the user wants.
               r = 'y'
               if options.filter == None and options.filter_inline == None:
                    print "sure to wanna delete everything? [y/N]"
                    r = dude.utils.getch() #raw_input("Skip, quit, or continue? [s/q/c]")

               if r == 'y':
                    dude.clean.clean_experiments(e, experiments)
          elif cmd == 'info':
               dude.info.show_info(e)
          else:
               print >> sys.stderr, "ERROR: wrong command."
               parser.print_help()

     else:
          parser.print_help()
          sys.exit()
